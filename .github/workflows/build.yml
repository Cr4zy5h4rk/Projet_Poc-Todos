name: Build-Analyze-Deliver-Deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up  JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu"

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Dependencies Scan
        #if: 1>2
        run: mvn clean verify -DskipTests -Pcve

      - name: Unit Testing
        run: mvn test -Put

      - name: Integration Testing
        run: mvn test -Pit

      - name: Quality Gate
        # On a utilis√© sonarcloud ou une instance distante
        run: mvn clean verify sonar:sonar -Dsonar.organization=mlndiaye -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=mlndiaye_AgiliteProject_Grpe_3

      - name: Check Quality Gate
        id: check_quality_gate
        run: |
          echo "Checking if quality gate is met ..."
          SONAR_PROJECT_KEY="mlndiaye_AgiliteProject_Grpe_3"
          SONAR_HOST_URL="https://sonarcloud.io"
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"

          status="IN_PROGRESS"
          attempt_counter=0
          max_attempts=10

          while [[ "$status" != "OK" && "$status" != "ERROR" && $attempt_counter -lt $max_attempts ]]; do
            sleep 10
            response=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY")
            status=$(echo $response | jq -r '.projectStatus.status')
            attempt_counter=$((attempt_counter+1))
          done

          if [[ "$status" != "OK" ]]; then
            echo "Quality Gate failed"
            echo "$response" | jq
            exit 1
          else
            echo "Quality Gate passed"
          fi

      - name: Package
        run: mvn -B package  -DskipTests=true

      - name: Login to Docker
        #votre travail
        #les trois prochaines etapes peuven etre fusionnees en une seule, le decoupe est volontaire pour plus de comprehension
        run: |
          docker login -u=${{secrets.DOCKER_USERNAME}} -p=${{ secrets.DOCKER_TOKEN}} docker.io

      - name: Build Docker image
        run: |
          docker build -t  ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }} -t  ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest  .

      - name: Publish Docker image versions
        run: |
          docker push --all-tags  ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}

      ##

      # - name: Deploy to Dev
      #   #votre travail
      #   #se connecter a un serveur distant et deployer l'image docker que vous venez de builder
      #   run: echo " 1) Login to my remote server ...\n 2) Stop docker container if running ... \n 3) Pull latest version and run it ... "

      # - name: Wait for deploy to finish
      #   #votre travail
      #   run: echo "Wait 30s ... "

      # - name: Check deploy
      #   #verifier si le deploiement s'est bien passe
      #   #votre travail
      #   run: echo " 1) Run Get request <my_server_ip:my_port/cicd/_health> to check if service is running ...\n 2) Get request should return 200 with content <Welcome to my Todo app> ..."

      ## NOTRE TRAVAIL

      #se connecter a un serveur distant et deployer l'image docker que vous venez de builder
      - name: Login to my remote server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST
          echo 'success'

      - name: Stop and remove docker container if running
        run: |
          docker stop ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }} || true
          docker rm ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }} || true

      - name: Pull latest version
        run: docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest

      - name: Run latest version
        run: docker run -d --name todos -p 80:8080 ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest

      - name: Wait for deploy to finish
        #notre travail
        run: |
          echo "Wait 60s ... "
          sleep 60
          echo "deployment finished"

      - name: Check deploy
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "1) Run Get request to check if service is running ..."
          status=$(curl -s -o /dev/null -w "%{http_code}" http://$REMOTE_HOST:80/cicd/_health)
          if [ $status -eq 200 ]; then
            echo "Service is running."
            echo "2) Get request returned HTTP 200."
            content=$(curl -s http://$REMOTE_HOST:80/cicd/_health)
            if [[ $content == *"Welcome to my Todo app"* ]]; then
              echo "Content verification successful."
            else
              echo "Content verification failed. Expected content not found."
              exit 1
            fi
          else
            echo "Service is not running. HTTP status code: $status"
            exit 1
          fi